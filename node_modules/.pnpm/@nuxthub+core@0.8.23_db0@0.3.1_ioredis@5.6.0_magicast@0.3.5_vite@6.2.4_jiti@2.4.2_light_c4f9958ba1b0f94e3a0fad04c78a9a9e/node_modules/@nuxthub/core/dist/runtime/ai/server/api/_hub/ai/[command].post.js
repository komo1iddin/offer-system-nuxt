import { eventHandler, getValidatedRouterParams, readValidatedBody } from "h3";
import { z } from "zod";
import { hubAI } from "../../../utils/ai.js";
import { requireNuxtHubAuthorization } from "../../../../../utils/auth.js";
import { requireNuxtHubFeature } from "../../../../../utils/features.js";
const statementValidation = z.object({
  model: z.string().min(1).max(1e6).trim(),
  params: z.record(z.string(), z.any()).optional(),
  options: z.record(z.string(), z.any()).optional()
});
export default eventHandler(async (event) => {
  await requireNuxtHubAuthorization(event);
  requireNuxtHubFeature("ai");
  const { command } = await getValidatedRouterParams(event, z.object({
    command: z.enum(["run"])
  }).parse);
  const ai = hubAI();
  if (command === "run") {
    const { model, params, options } = await readValidatedBody(event, statementValidation.pick({ model: true, params: true, options: true }).parse);
    const res = await ai.run(model, params, options);
    if (res instanceof ReadableStream) {
      return new Response(res, {
        headers: {
          "Content-Type": "image/png"
        }
      });
    }
    return res;
  }
});
