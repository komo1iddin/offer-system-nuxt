import { eventHandler, getValidatedRouterParams, readValidatedBody } from "h3";
import { z } from "zod";
import { hubDatabase } from "../../../utils/database.js";
import { requireNuxtHubAuthorization } from "../../../../../utils/auth.js";
import { requireNuxtHubFeature } from "../../../../../utils/features.js";
const statementValidation = z.object({
  query: z.string().min(1).max(1e6).trim(),
  params: z.any().array().default([])
});
export default eventHandler(async (event) => {
  await requireNuxtHubAuthorization(event);
  requireNuxtHubFeature("database");
  const { command } = await getValidatedRouterParams(event, z.object({
    command: z.enum(["first", "all", "raw", "run", "exec", "batch"])
  }).parse);
  const db = hubDatabase();
  if (command === "exec") {
    const { query: query2 } = await readValidatedBody(event, statementValidation.pick({ query: true }).parse);
    return db.exec(query2);
  }
  if (command === "first") {
    const { query: query2, params: params2, colName } = await readValidatedBody(event, z.intersection(
      statementValidation,
      z.object({ colName: z.string().optional() })
    ).parse);
    if (colName) {
      return db.prepare(query2).bind(...params2).first(colName);
    }
    return db.prepare(query2).bind(...params2).first();
  }
  if (command === "batch") {
    const statements = await readValidatedBody(event, z.array(statementValidation).parse);
    return db.batch(
      statements.map((stmt) => db.prepare(stmt.query).bind(...stmt.params))
    );
  }
  if (command === "raw") {
    const { query: query2, params: params2, columnNames } = await readValidatedBody(event, z.intersection(
      statementValidation,
      z.object({ columnNames: z.boolean().default(false) })
    ).parse);
    return db.prepare(query2).bind(...params2).raw({ columnNames });
  }
  const { query, params } = await readValidatedBody(event, statementValidation.parse);
  return db.prepare(query).bind(...params)[command]();
});
