import ms from "ms";
import { eventHandler, getRouterParam } from "h3";
import { requireNuxtHubAuthorization } from "../../../../../utils/auth.js";
import { requireNuxtHubFeature } from "../../../../../utils/features.js";
import { hubCacheBinding } from "../../../utils/cache.js";
import { useStorage } from "#imports";
export default eventHandler(async (event) => {
  await requireNuxtHubAuthorization(event);
  requireNuxtHubFeature("cache");
  const keyOrPrefix = (getRouterParam(event, "key") || "").replace(/\//g, ":");
  if (/\.[a-z0-9]{2,5}$/i.test(keyOrPrefix)) {
    const item = await useStorage("cache").getItem(keyOrPrefix);
    if (item) {
      return item;
    }
  }
  const prefix = `${keyOrPrefix}:`;
  const binding = hubCacheBinding();
  const keys = [];
  let cursor = void 0;
  do {
    const res = await binding.list({ prefix, cursor });
    keys.push(...res.keys);
    cursor = res.list_complete ? void 0 : res.cursor;
  } while (cursor);
  const stats = {
    groups: {},
    cache: []
  };
  await Promise.all(keys.map(async ({ name, metadata }) => {
    const key = name.slice(prefix.length);
    if (key.includes(":")) {
      const k = key.split(":")[0];
      stats.groups[k] = (stats.groups[k] || 0) + 1;
      return;
    }
    if (!metadata) {
      const item = await useStorage("cache").getItem(name);
      if (!item) return;
      metadata = {
        size: JSON.stringify(item).length,
        mtime: item.mtime,
        expires: item.expires
      };
    }
    if (!metadata.expires && metadata.ttl) {
      metadata.expires = metadata.mtime + metadata.ttl * 1e3;
    }
    const entry = {
      key,
      ...metadata
    };
    try {
      entry.duration = ms(metadata.expires - metadata.mtime, { long: true });
    } catch (err) {
      entry.duration = "never";
    }
    stats.cache.push(entry);
  }));
  return stats;
});
