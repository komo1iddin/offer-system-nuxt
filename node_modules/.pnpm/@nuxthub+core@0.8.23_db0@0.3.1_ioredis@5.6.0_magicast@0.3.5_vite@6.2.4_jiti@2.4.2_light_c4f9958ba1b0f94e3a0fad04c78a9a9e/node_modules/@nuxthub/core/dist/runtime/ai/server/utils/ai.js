import { ofetch } from "ofetch";
import { joinURL } from "ufo";
import { createError } from "h3";
import { requireNuxtHubFeature } from "../../../utils/features.js";
import { getCloudflareAccessHeaders } from "../../../utils/cloudflareAccess.js";
import { useRuntimeConfig } from "#imports";
let _ai;
export function hubAI() {
  requireNuxtHubFeature("ai");
  if (_ai) {
    return _ai;
  }
  const hub = useRuntimeConfig().hub;
  const binding = process.env.AI || globalThis.__env__?.AI || globalThis.AI;
  if (hub.remote && hub.projectUrl && !binding) {
    const cfAccessHeaders = getCloudflareAccessHeaders(hub.cloudflareAccess);
    _ai = proxyHubAI(hub.projectUrl, hub.projectSecretKey || hub.userToken, cfAccessHeaders);
  } else if (import.meta.dev) {
    _ai = {
      async run(model, params, options) {
        if (!hub.projectKey) {
          throw createError({
            statusCode: 500,
            message: "Missing hub.projectKey variable to use hubAI()"
          });
        }
        if (!hub.userToken) {
          throw createError({
            statusCode: 500,
            message: "Missing hub.userToken variable to use hubAI()"
          });
        }
        return $fetch(`/api/projects/${hub.projectKey}/ai/run`, {
          baseURL: hub.url,
          method: "POST",
          headers: {
            authorization: `Bearer ${hub.userToken}`
          },
          body: { model, params, options },
          responseType: params?.stream ? "stream" : void 0
        }).catch(handleProxyError);
      }
    };
  } else if (binding) {
    _ai = binding;
  }
  if (!_ai) {
    throw createError("Missing Cloudflare AI binding (AI)");
  }
  return _ai;
}
export function proxyHubAI(projectUrl, secretKey, headers) {
  requireNuxtHubFeature("ai");
  const aiAPI = ofetch.create({
    baseURL: joinURL(projectUrl, "/api/_hub/ai"),
    method: "POST",
    headers: {
      Authorization: `Bearer ${secretKey}`,
      ...headers
    }
  });
  return {
    async run(model, params, options) {
      return aiAPI("/run", {
        body: { model, params, options },
        responseType: params?.stream ? "stream" : void 0
      }).catch(handleProxyError);
    }
  };
}
async function handleProxyError(err) {
  if (import.meta.dev && err.statusCode === 403) {
    console.warn("It seems that your Cloudflare API token does not have the `Worker AI` permission.\nOpen `https://dash.cloudflare.com/profile/api-tokens` and edit your NuxtHub token.\nAdd the `Account > Worker AI > Read` permission to your token and save it.");
  }
  let data = err.data;
  if (!err.data && typeof err.response?.json === "function") {
    data = (await err.response.json())?.data || {};
  }
  throw createError({
    statusCode: data?.statusCode || err.statusCode,
    statusMessage: data?.statusMessage || err.statusMessage,
    // @ts-expect-error not aware of data property
    message: data?.message || err.message,
    data
  });
}
