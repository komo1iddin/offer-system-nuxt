import { writeFile, rm, mkdir, readdir } from "fs/promises";
import { useRuntimeConfig } from "#imports";
import { join } from "path";
export const storeFileLocally = async (file, fileNameOrIdLength, filelocation = "") => {
  const { binaryString, ext } = parseDataUrl(file.content);
  const location = useRuntimeConfig().public.fileStorage.mount;
  const originalExt = file.name.toString().split(".").pop() || ext;
  const filename = typeof fileNameOrIdLength == "number" ? `${generateRandomId(fileNameOrIdLength)}.${originalExt}` : `${fileNameOrIdLength}.${originalExt}`;
  await mkdir(join(location, filelocation), { recursive: true });
  await writeFile(join(location, filelocation, filename), binaryString, {
    flag: "w"
  });
  return filename;
};
export const getFileLocally = (filename, filelocation = "") => {
  const location = useRuntimeConfig().public.fileStorage.mount;
  const normalizedFilelocation = filelocation.startsWith("/") ? filelocation.slice(1) : filelocation;
  return join(location, normalizedFilelocation, filename);
};
export const getFilesLocally = async (filelocation = "") => {
  const location = useRuntimeConfig().public.fileStorage.mount;
  const normalizedFilelocation = filelocation.startsWith("/") ? filelocation.slice(1) : filelocation;
  return await readdir(join(location, normalizedFilelocation)).catch(() => []);
};
export const deleteFile = async (filename, filelocation = "") => {
  const location = useRuntimeConfig().public.fileStorage.mount;
  const normalizedFilelocation = filelocation.startsWith("/") ? filelocation.slice(1) : filelocation;
  await rm(join(location, normalizedFilelocation, filename));
};
const generateRandomId = (length) => {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let randomId = "";
  for (let i = 0; i < length; i++) {
    randomId += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return randomId;
};
export const parseDataUrl = (file) => {
  const arr = file.split(",");
  const mimeMatch = arr[0].match(/:(.*?);/);
  if (!mimeMatch) {
    throw new Error("Invalid data URL");
  }
  const mime = mimeMatch[1];
  const base64String = arr[1];
  const binaryString = Buffer.from(base64String, "base64");
  const ext = mime.split("/")[1];
  return { binaryString, ext };
};
