/// <reference types="node" />
/// <reference types="node" />
import type { ServerFile } from '../../../types.js';
/**
 * @description Will store the file in the specified directory
 * @param file provide the file object
 * @param fileNameOrIdLength you can pass a string or a number, if you enter a string it will be the file name, if you enter a number it will generate a unique ID
 * @param filelocation provide the folder you wish to locate the file in
 * @returns file name: `${filename}`.`${fileExtension}`
 *
 *
 * [Documentation](https://github.com/NyllRE/nuxt-file-storage#handling-files-in-the-backend)
 *
 *
 * @example
 * ```ts
 * import { ServerFile } from "nuxt-file-storage";
 *
 * const { file } = await readBody<{ files: ServerFile }>(event)

 * await storeFileLocally( file, 8, '/userFiles' )
 * ```
 */
export declare const storeFileLocally: (file: ServerFile, fileNameOrIdLength: string | number, filelocation?: string) => Promise<string>;
/**
 * @description Get file path in the specified directory
 * @param filename provide the file name (return of storeFileLocally)
 * @param filelocation provide the folder you wish to locate the file in
 * @returns file path: `${config.fileStorage.mount}/${filelocation}/${filename}`
 */
export declare const getFileLocally: (filename: string, filelocation?: string) => string;
/**
 * @description Get all files in the specified directory
 * @param filelocation provide the folder you wish to locate the file in
 * @returns all files in filelocation: `${config.fileStorage.mount}/${filelocation}`
 */
export declare const getFilesLocally: (filelocation?: string) => Promise<string[]>;
/**
 * @param filename the name of the file you want to delete
 * @param filelocation the folder where the file is located, if it is in the root folder you can leave it empty, if it is in a subfolder you can pass the name of the subfolder with a preceding slash: `/subfolder`
 * @example
 * ```ts
 * await deleteFile('/userFiles', 'requiredFile.txt')
 * ```
 */
export declare const deleteFile: (filename: string, filelocation?: string) => Promise<void>;
/**
 * @description Parses a data URL and returns an object with the binary data and the file extension.
 * @param {string} file - The data URL
 * @returns {{binaryString: Buffer, ext: string}} An object with the binary data - file extension
 *
 * @example
 * ```ts
 *   const { binaryString, ext } = parseDataUrl(file.content)
 * ```
 */
export declare const parseDataUrl: (file: string) => {
    binaryString: Buffer;
    ext: string;
};
