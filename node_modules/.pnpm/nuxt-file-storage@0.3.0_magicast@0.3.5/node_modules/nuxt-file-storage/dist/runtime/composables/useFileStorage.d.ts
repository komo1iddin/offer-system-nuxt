import type { ClientFile } from '../../types.js';
type Options = {
    clearOldFiles: boolean;
};
export default function (options?: Options): {
    files: import("vue").Ref<{
        content: string | {
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => ArrayBuffer;
            readonly [Symbol.toStringTag]: string;
        } | null | undefined;
        name: string;
        lastModified: number;
        readonly size: number;
        readonly type: string;
        arrayBuffer: () => Promise<ArrayBuffer>;
        slice: (start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob;
        stream: () => ReadableStream<Uint8Array>;
        text: () => Promise<string>;
    }[], ClientFile[] | {
        content: string | {
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => ArrayBuffer;
            readonly [Symbol.toStringTag]: string;
        } | null | undefined;
        name: string;
        lastModified: number;
        readonly size: number;
        readonly type: string;
        arrayBuffer: () => Promise<ArrayBuffer>;
        slice: (start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob;
        stream: () => ReadableStream<Uint8Array>;
        text: () => Promise<string>;
    }[]>;
    handleFileInput: (event: any) => Promise<void>;
    clearFiles: () => void;
};
export {};
